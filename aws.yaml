tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.2.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - http://www.getcloudify.org/spec/awssdk-plugin/1.2.0.1/plugin.yaml
  - https://github.com/cloudify-cosmo/cloudify-aws-plugin/releases/download/1.5.1.2/plugin.yaml
  - types/mongodbtypes.yaml
  - imports/mongodbV3.2-blueprint.yaml

inputs:

  ami:
    description: >
      An AWS AMI. Tested with a Ubuntu 14.04 image.
    default: { get_secret: ubuntu_trusty_image }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.micro

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu


  vpc_id:
    description: >
      The ID of the VPC that the VM should be connected to.
    default: { get_secret: vpc_id }

  public_subnet_id:
    description: >
      The ID of the public subnet in vpc_id.
      This subnet should allow elastic IPs and it should also have either a NAT gateway or NAT instance.
    default: { get_secret: public_subnet_id }

  private_subnet_id:
    description: >
      The ID of the private subnet in vpc_id.
      This subnet should have internet routing to a NAT on another subnet.
    default: { get_secret: private_subnet_id }

  availability_zone:
    description: >
      The availability zone where to create the VM, should be in the same availability zone as public_subnet_id.
    default: { get_secret: availability_zone }

  agent_key_private:
    description: >
      The content of the agent's private key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: >
      The content of the agent's public key.
    default: { get_secret: agent_key_public }

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

node_templates:

  mongod_host:
    type: cloudify.aws.nodes.Instance
    properties:
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_input: agent_key_private }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              block_device_map:
                '/dev/sda1':
                  delete_on_termination: true
              placement: { get_input: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: ssh_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: mongod_host_security_group
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: mongod_ip

  mongos_host:
    type: cloudify.aws.nodes.Instance
    properties:
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_input: agent_key_private }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              block_device_map:
                '/dev/sda1':
                  delete_on_termination: true
              placement: { get_input: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: ssh_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: mongos_host_security_group
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: mongos_ip

  mongo_config_host:
    type: cloudify.aws.nodes.Instance
    properties:
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_input: agent_key_private }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              block_device_map:
                '/dev/sda1':
                  delete_on_termination: true
              placement: { get_input: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: ssh_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: mongo_config_host_security_group
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: mongo_config_ip

  ssh_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Puppet Group
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  mongod_host_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Mongo Database Group
      rules:
        - ip_protocol: tcp
          from_port: { get_property: [mongod, port] }
          to_port: { get_property: [mongod, port] }
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  mongos_host_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Mongo Shard Group
      rules:
        - ip_protocol: tcp
          from_port: { get_property: [mongos, port] }
          to_port: { get_property: [mongos, port] }
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  mongo_config_host_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Puppet Group
      rules:
        - ip_protocol: tcp
          from_port: { get_property: [mongo_config, port] }
          to_port: { get_property: [mongo_config, port] }
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  mongod_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  mongos_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  mongo_config_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_id }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: vpc_id }
      cidr_block: N/A
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
          - name: { get_input: agent_user }
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_input: agent_key_public }
