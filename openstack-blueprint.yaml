tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - types/mongodbtypes.yaml
  - imports/mongodbV3.2-blueprint.yaml
  - types/cloud_config/cloud-config.yaml

inputs:

  image:
    description: >
      An Openstack Image ID. Tested with a Ubuntu 14.04 image.
    default: { get_secret: ubuntu_trusty_image }

  flavor:
    description: >
      An Openstack Flavor ID.
    default: { get_secret: small_image_flavor }

  agent_user:
    description: The user name of the agent on the instance created from the image.
    default: ubuntu

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_secret: region }

  compute_properties: &compute_properties
    openstack_config: *openstack_config
    agent_config:
      user: { get_input: agent_user }
      install_method: remote
      port: 22
      key: { get_secret: agent_key_private }
    server:
      key_name: ''
      image: { get_input: image }
      flavor: { get_input: flavor }
    management_network_name: { get_property: [ public_network, resource_id ] }

node_templates:

  mongod_host_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: mongod_host_security_group
        description: mongo database node security group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [mongod, port] }

  mongod_host:
    type: cloudify.openstack.nodes.Server
    properties: *compute_properties
    relationships:
      - target: mongodb_host_port
        type: cloudify.openstack.server_connected_to_port
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstack.nova_plugin.server.create
          inputs:
            args:
              image: { get_input: image }
              flavor: { get_input: flavor }
              userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }

  ssh_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: ssh_security_group
        description: SSH Group
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0

  mongodb_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: mongod_host_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: mongod_ip

  mongod_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  mongos_host_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: mongos_host_security_group
        description: mongo shard node security group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [mongos, port] }

  mongos_host:
    type: cloudify.openstack.nodes.Server
    properties: *compute_properties
    relationships:
      - target: mongos_host_port
        type: cloudify.openstack.server_connected_to_port
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstack.nova_plugin.server.create
          inputs:
            args:
              image: { get_input: image }
              flavor: { get_input: flavor }
              userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }

  mongos_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: mongos_host_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: mongos_ip
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group

  mongos_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  mongo_config_host_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: mongo_config_host_security_group
        description: mongo config node security group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [mongo_config, port] }

  mongo_config_host:
    type: cloudify.openstack.nodes.Server
    properties: *compute_properties
    relationships:
      - target: mongo_config_host_port
        type: cloudify.openstack.server_connected_to_port
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstack.nova_plugin.server.create
          inputs:
            args:
              image: { get_input: image }
              flavor: { get_input: flavor }
              userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }

  mongo_config_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: mongo_config_host_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: mongo_config_ip
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group

  mongo_config_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: public_subnet_name }
    relationships:
      - target: public_network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: public_network_name }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: router_name }
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: external_network_name }
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudConfig
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            cloud_config:
              users:
                - name: { get_input: agent_user }
                  shell: /bin/bash
                  sudo: ['ALL=(ALL) NOPASSWD:ALL']
                  ssh-authorized-keys:
                    - { get_secret: agent_key_public }
