tosca_definitions_version: cloudify_dsl_1_3

description: >
  The blueprint describes an shared mongoDB cluster in OpenStack.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0/types.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - types/mongodbtypes.yaml
  - imports/mongodbV3.2-blueprint.yaml

inputs:

  image:
    description: Image to be used when launching agent VM's

  flavor:
    description: Flavor of the agent VM's

  agent_user:
    default: ubuntu

  key_name:
    description: >
      the agent public key name (created during manager bootstrap)
    type: string
    default: mongodb-openstack-key

  private_key_path:
    type: string
    default: ~/.ssh/mongodb-openstack-key.pem

  external_network_name:
    default: external

  router_name:
    description: The Router Name

  public_network_name:
    description: The name of the Openstack public network.

  public_subnet_name:
    description: The name of the public network subnet.

  region:
    default: ''

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_input: region }

  compute_properties: &compute_properties
    openstack_config: *openstack_config
    server:
      image: { get_input: image }
      flavor: { get_input: flavor }
    management_network_name: { get_property: [ public_network, resource_id ] }
    agent_config:
      user: { get_input: agent_user }
      key: { get_property: [ key, private_key_path ] }
      install_method: remote
      port: 22

node_templates:

  mongod_host_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: mongod_host_security_group
        description: mongo database node security group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [mongod, port] }

  mongod_host:
    type: cloudify.openstack.nodes.Server
    properties: *compute_properties
    relationships:
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: mongodb_host_port
        type: cloudify.openstack.server_connected_to_port

  ssh_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: ssh_security_group
        description: SSH Group
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0

  mongodb_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: mongod_host_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: mongod_ip

  mongod_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  mongos_host_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: mongos_host_security_group
        description: mongo shard node security group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [mongos, port] }

  mongos_host:
    type: cloudify.openstack.nodes.Server
    properties: *compute_properties
    relationships:
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: mongos_host_port
        type: cloudify.openstack.server_connected_to_port

  mongos_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: mongos_host_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: mongos_ip
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group

  mongos_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  mongo_config_host_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: mongo_config_host_security_group
        description: mongo config node security group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [mongo_config, port] }

  mongo_config_host:
    type: cloudify.openstack.nodes.Server
    properties: *compute_properties
    relationships:
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: mongo_config_host_port
        type: cloudify.openstack.server_connected_to_port

  mongo_config_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: mongo_config_host_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: mongo_config_ip
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group

  mongo_config_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_name }
    relationships:
      - target: public_network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_network_name }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: router_name }
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: external_network_name }

  key:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_config
      resource_id: { get_input: key_name }
      private_key_path: { get_input: private_key_path }
